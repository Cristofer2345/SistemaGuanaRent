/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view;

import clases.Alquileres;
import clases.Inquilino;
import clases.Mensualidades;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 **@author Sebastian Daniel Martinez
 * @author Jose Andres Cortes
 * @author Criztofer Angulo Lopez
 *
 */
public class FrmMensualidades extends javax.swing.JDialog {

    LocalDate fechaActual = LocalDate.now();
    //ArrayList mensualidades
    private static ArrayList<Mensualidades> listaMensualidades = new ArrayList();
    private static ArrayList<Alquileres> rentals = new ArrayList();
    private static ArrayList<Inquilino> listTenant = new ArrayList();
    String[] titlesCbx = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
    private DefaultComboBoxModel<String> modelCbx = new DefaultComboBoxModel<>(titlesCbx);
    String columns[] = {"Consecutivo", "Num Alquiler", "Fecha Creacion", "Inquilino", "Mes en cobro", "Año", "Descuento", "Monto a pagar", "Estado"};
    DefaultTableModel tblModel = new DefaultTableModel(null, columns);

    /**
     * Creates new form FrmMensualidades
     */
    public FrmMensualidades(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        tblMensualidades.setModel(tblModel);
        this.setLocationRelativeTo(null); //Se utiliza para centrar la ventana

    }

    public FrmMensualidades(java.awt.Frame parent, boolean modal, ArrayList<Mensualidades> mensualidad, ArrayList<Alquileres> rentals, ArrayList<Inquilino> tenant) {
        super(parent, modal);
        initComponents();
        tblMensualidades.setModel(tblModel);
        this.setLocationRelativeTo(null); //Se utiliza para centrar la ventana
        cmbMeses.setModel(modelCbx);
        cmbMes.setModel(modelCbx);
        txtFechaActual.setEditable(false);
        txtFechaActual.setText("" + fechaActual);
        this.rentals = rentals;
        this.listaMensualidades = mensualidad;
        this.listTenant = tenant;
        loadingData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGenerarMensualidades = new javax.swing.JPanel();
        lblFechaActual = new javax.swing.JLabel();
        txtFechaActual = new javax.swing.JTextField();
        lblMeses = new javax.swing.JLabel();
        lblAño = new javax.swing.JLabel();
        txtAnioGenerate = new javax.swing.JTextField();
        cmbMeses = new javax.swing.JComboBox<>();
        btnGenerar = new javax.swing.JButton();
        pnlMostrarMensualidades = new javax.swing.JPanel();
        lblMes = new javax.swing.JLabel();
        lblAnio = new javax.swing.JLabel();
        btnMostrar = new javax.swing.JButton();
        txtAnio = new javax.swing.JTextField();
        cmbMes = new javax.swing.JComboBox<>();
        lblFiltrar = new javax.swing.JLabel();
        rbnInquilino = new javax.swing.JCheckBox();
        rbnMes = new javax.swing.JCheckBox();
        rbnAnio = new javax.swing.JCheckBox();
        txtBusqueda = new javax.swing.JTextField();
        pnlRegistros = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMensualidades = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion de Mensualidades");

        pnlGenerarMensualidades.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Generar Mensualidades", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        lblFechaActual.setText("Fecha Actual:");

        lblMeses.setText("Mes:");

        lblAño.setText("Año:");

        txtAnioGenerate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnioGenerateKeyTyped(evt);
            }
        });

        cmbMeses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesesActionPerformed(evt);
            }
        });

        btnGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/generar.png"))); // NOI18N
        btnGenerar.setText("Generar");
        btnGenerar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnGenerar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlGenerarMensualidadesLayout = new javax.swing.GroupLayout(pnlGenerarMensualidades);
        pnlGenerarMensualidades.setLayout(pnlGenerarMensualidadesLayout);
        pnlGenerarMensualidadesLayout.setHorizontalGroup(
            pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerarMensualidadesLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlGenerarMensualidadesLayout.createSequentialGroup()
                        .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAño, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMeses, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFechaActual))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFechaActual)
                            .addComponent(txtAnioGenerate)
                            .addComponent(cmbMeses, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        pnlGenerarMensualidadesLayout.setVerticalGroup(
            pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerarMensualidadesLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFechaActual)
                    .addComponent(txtFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMeses)
                    .addComponent(cmbMeses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAño)
                    .addComponent(txtAnioGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnGenerar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMostrarMensualidades.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mostrar Mensualidades", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        lblMes.setText("Mes:");

        lblAnio.setText("Año:");

        btnMostrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mostrar.png"))); // NOI18N
        btnMostrar.setText("Mostrar Mensualidades");
        btnMostrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMostrar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnMostrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        txtAnio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnioKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlMostrarMensualidadesLayout = new javax.swing.GroupLayout(pnlMostrarMensualidades);
        pnlMostrarMensualidades.setLayout(pnlMostrarMensualidadesLayout);
        pnlMostrarMensualidadesLayout.setHorizontalGroup(
            pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMostrarMensualidadesLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMostrarMensualidadesLayout.createSequentialGroup()
                        .addComponent(lblAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMostrarMensualidadesLayout.createSequentialGroup()
                        .addComponent(lblMes, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMostrarMensualidadesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        pnlMostrarMensualidadesLayout.setVerticalGroup(
            pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMostrarMensualidadesLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMes)
                    .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnio)
                    .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMostrar)
                .addContainerGap())
        );

        lblFiltrar.setText("Filtar por:");

        rbnInquilino.setText("Inquilino");
        rbnInquilino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnInquilinoActionPerformed(evt);
            }
        });

        rbnMes.setText("Mes");
        rbnMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnMesActionPerformed(evt);
            }
        });

        rbnAnio.setText("Año");
        rbnAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnAnioActionPerformed(evt);
            }
        });

        txtBusqueda.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyReleased(evt);
            }
        });

        pnlRegistros.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Todos los registros de mensualidades", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        tblMensualidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblMensualidades);

        javax.swing.GroupLayout pnlRegistrosLayout = new javax.swing.GroupLayout(pnlRegistros);
        pnlRegistros.setLayout(pnlRegistrosLayout);
        pnlRegistrosLayout.setHorizontalGroup(
            pnlRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRegistrosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1013, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
        pnlRegistrosLayout.setVerticalGroup(
            pnlRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(pnlRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 1040, Short.MAX_VALUE)
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(pnlGenerarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128)
                        .addComponent(pnlMostrarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(lblFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbnInquilino)
                        .addGap(18, 18, 18)
                        .addComponent(rbnMes)
                        .addGap(33, 33, 33)
                        .addComponent(rbnAnio)
                        .addGap(18, 18, 18)
                        .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(215, Short.MAX_VALUE))
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlGenerarMensualidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMostrarMensualidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFiltrar)
                    .addComponent(rbnInquilino)
                    .addComponent(rbnMes)
                    .addComponent(rbnAnio)
                    .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(pnlRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbMesesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMesesActionPerformed

    private void rbnInquilinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnInquilinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbnInquilinoActionPerformed

    private void rbnMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbnMesActionPerformed

    private void rbnAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnAnioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbnAnioActionPerformed

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        filtrar(month(cmbMes.getSelectedItem().toString()), Integer.parseInt(txtAnio.getText()));
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
       
        añadir();
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void txtAnioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnioKeyTyped
        txtanioKeyTyped(evt);
    }//GEN-LAST:event_txtAnioKeyTyped

    private void txtAnioGenerateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnioGenerateKeyTyped
        txtanioKeyTyped(evt);
    }//GEN-LAST:event_txtAnioGenerateKeyTyped

    private void txtBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyReleased
        String word = txtBusqueda.getText();
        int selection;
        //Creación de los modelos de los Jlist 
        DefaultListModel<String> listModel = new DefaultListModel<String>();
        DefaultTableModel modelTable = new DefaultTableModel(null, columns);
        Mensualidades  mensualidades = new Mensualidades();
        if (rbnInquilino.isSelected()) {
            selection = 0;
        } else  if (rbnMes.isSelected()) {
            selection = 1;
        }else{
           selection = 2 ; 
        }

        switch (selection) {
            case 0:
                
               try {
                for (int i = 0; i < listaMensualidades.size(); i++) {
                    mensualidades = listaMensualidades.get(i);
                    if (mensualidades.getNomInquilino() != null) {
                        //Con esté linea es posible buscar palabras comparando cada char 
                        String wordTem = mensualidades.getNomInquilino().substring(0, word.length());
                        if (wordTem.contentEquals(txtBusqueda.getText())) {
                            Object rows[] = {mensualidades.getConsecutivo(), mensualidades.getNumAlquiler(), mensualidades.getFechCreacion(), mensualidades.getNomInquilino(), mensualidades.getMesCobro(), mensualidades.getAnioActual(), mensualidades.getDescuento(), mensualidades.getMontoMes(), mensualidades.getEstado()};
                            modelTable.addRow(rows);
                            tblMensualidades.setModel(modelTable);
                        }
                    }

                }

            } catch (StringIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null, "No se encontraron resultados");
                txtBusqueda.setText("");
            }
                break;
            case 1: 
               try {
                for (int i = 0; i < listaMensualidades.size(); i++) {
                    mensualidades = listaMensualidades.get(i);
                    if (mensualidades.getNomInquilino() != null) {
                        //Con esté linea es posible buscar palabras comparando cada char 
                        String wordTem = mensualidades.getNomInquilino().substring(0, word.length());
                        if (wordTem.contentEquals(txtBusqueda.getText())) {
                            Object rows[] = {mensualidades.getConsecutivo(), mensualidades.getNumAlquiler(), mensualidades.getFechCreacion(), mensualidades.getNomInquilino(), mensualidades.getMesCobro(), mensualidades.getAnioActual(), mensualidades.getDescuento(), mensualidades.getMontoMes(), mensualidades.getEstado()};
                            modelTable.addRow(rows);
                            tblMensualidades.setModel(modelTable);
                        }
                    }

                }

            } catch (StringIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null, "No se encontraron resultados");
                txtBusqueda.setText("");
            }
            break;
        }

        
        if (txtBusqueda.getText().equals("")) {
            tblMensualidades.setModel(this.tblModel);

        }
    }//GEN-LAST:event_txtBusquedaKeyReleased
    public void añadir() {

        for (int i = 0; i < rentals.size(); i++) {

            if (fechaActual.isBefore(rentals.get(i).getFechContrato())) {
                if (month(cmbMeses.getSelectedItem().toString()) >= rentals.get(i).getFechContrato().getMonthValue()) {
                    if (txtAnio.getText() != "") {
                        if (rentals.get(i).getFechContrato().getYear() <= Integer.parseInt(txtAnioGenerate.getText())) {
                            if (!verificarRepetidos(month(cmbMeses.getSelectedItem().toString()), Integer.parseInt(txtAnioGenerate.getText()), Integer.parseInt("" + rentals.get(i).getNumAlquiler()))) {
                                if (rentals.get(i).getEstado().equals("Vigente")) {
                                    Mensualidades mensualidades = new Mensualidades(concecutivo(),//INT
                                            rentals.get(i).getNumAlquiler(),//INT
                                            fechaActual,//LOCALDATE
                                            nameTenant(rentals.get(i).getCedInquilino()),//STRING
                                            month(cmbMeses.getSelectedItem().toString()),//INT
                                            Integer.parseInt(txtAnioGenerate.getText()),//INT
                                            validarDescuentos(cmbMeses.getSelectedItem().toString()),//INT 
                                            montoPagar(rentals.get(i).getPrecioAlquiler(), validarDescuentos(cmbMeses.getSelectedItem().toString())),//int
                                            rentals.get(i).getEstado());//String
                                    listaMensualidades.add(mensualidades);
                                    Object rows[] = {mensualidades.getConsecutivo(), mensualidades.getNumAlquiler(), mensualidades.getFechCreacion(), mensualidades.getNomInquilino(), mensualidades.getMesCobro(), mensualidades.getAnioActual(), mensualidades.getDescuento(), mensualidades.getMontoMes(), mensualidades.getEstado()};
                                    tblModel.addRow(rows);
                                    tblMensualidades.setModel(tblModel);
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Debe añadir el año ");
                    }
                }

            }
        }

    }

    private int concecutivo() {

        int concecutivo = 0;
        if (listaMensualidades.size() == 0) {
            concecutivo = 1;

        } else if (listaMensualidades.size() == 1) {
            concecutivo = 2;
        } else {
            concecutivo = listaMensualidades.size() + 1;
        }
        return concecutivo;
    }

    private String nameTenant(long idCedula) {
        for (int i = 0; i < listTenant.size(); i++) {
            if (listTenant.get(i).getCedula() == idCedula) {
                return listTenant.get(i).getNombre();
            }
        }
        return "";
    }

    private int month(String Month) {

        switch (Month.toUpperCase()) {
            case "ENERO":
                return 1;
            case "FEBRERO":
                return 2;
            case "MARZO":
                return 3;
            case "ABRIL":
                return 4;
            case "MAYO":
                return 5;
            case "JUNIO":
                return 6;
            case "JULIO":
                return 7;
            case "AGOSTO":
                return 8;
            case "SEPTIEMBRE":
                return 9;
            case "OCTUBRE":
                return 10;
            case "NOVIEMBRE":
                return 11;

            default:
                return 12;
        }
    }

    private int validarDescuentos(String Month) {

        switch (Month.toUpperCase()) {
            case "ENERO":
                return 0;
            case "FEBRERO":
                return 0;
            case "MARZO":
                return 5;
            case "ABRIL":
                return 5;
            case "MAYO":
                return 5;
            case "JUNIO":
                return 5;
            case "JULIO":
                return 5;
            case "AGOSTO":
                return 10;
            case "SEPTIEMBRE":
                return 10;
            case "OCTUBRE":
                return 10;
            case "NOVIEMBRE":
                return 0;

            default:
                return 0;
        }

    }

    private float montoPagar(int monto, int Descuento) {
        float subtotal = ((float) Descuento / 100); // Convertir Descuento a float
        float DESCUENTO = monto * subtotal;
        return (float) (monto - DESCUENTO);
    }

    private boolean verificarRepetidos(int mes, int anio, int numAquiler) {
        for (int i = 0; i < listaMensualidades.size(); i++) {
            if (listaMensualidades.get(i).getMesCobro() == mes && anio == listaMensualidades.get(i).getAnioActual() && listaMensualidades.get(i).getNumAlquiler() == numAquiler  )  {
                return true;

            }
        }
        return false;
    }

    private void filtrar(int mes, int anio) {
        DefaultTableModel modelTableTemp = new DefaultTableModel(null, columns);
        for (int i = 0; i < listaMensualidades.size(); i++) {
            if (listaMensualidades.get(i).getMesCobro() == mes && listaMensualidades.get(i).getAnioActual() == anio ) {
                Object[] data = {listaMensualidades.get(i).getConsecutivo(),
                     listaMensualidades.get(i).getNumAlquiler(),
                     listaMensualidades.get(i).getFechCreacion(),
                     listaMensualidades.get(i).getNomInquilino(),
                     listaMensualidades.get(i).getMesCobro(),
                     listaMensualidades.get(i).getAnioActual(),
                     listaMensualidades.get(i).getDescuento(),
                     listaMensualidades.get(i).getMontoMes(),
                     listaMensualidades.get(i).getEstado()};
                modelTableTemp.addRow(data);

            }
        }
        tblMensualidades.setModel(modelTableTemp);

    }

    private void loadingData() {
        for (int i = 0; i < listaMensualidades.size(); i++) {
            Object[] data = {listaMensualidades.get(i).getConsecutivo(),
                 listaMensualidades.get(i).getNumAlquiler(),
                 listaMensualidades.get(i).getFechCreacion(),
                 listaMensualidades.get(i).getNomInquilino(),
                 listaMensualidades.get(i).getMesCobro(),
                 listaMensualidades.get(i).getAnioActual(),
                 listaMensualidades.get(i).getDescuento(),
                 listaMensualidades.get(i).getMontoMes(),
                 listaMensualidades.get(i).getEstado()};
            tblModel.addRow(data);
        }

        tblMensualidades.setModel(tblModel);

    }

    private void txtanioKeyTyped(java.awt.event.KeyEvent evt) {
        int number = evt.getKeyChar();
        boolean verify = number >= 40 && number <= 57;
        if (!verify) {
            evt.consume();

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmMensualidades dialog = new FrmMensualidades(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JComboBox<String> cmbMeses;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAnio;
    private javax.swing.JLabel lblAño;
    private javax.swing.JLabel lblFechaActual;
    private javax.swing.JLabel lblFiltrar;
    private javax.swing.JLabel lblMes;
    private javax.swing.JLabel lblMeses;
    private javax.swing.JPanel pnlGenerarMensualidades;
    private javax.swing.JPanel pnlMostrarMensualidades;
    private javax.swing.JPanel pnlRegistros;
    private javax.swing.JCheckBox rbnAnio;
    private javax.swing.JCheckBox rbnInquilino;
    private javax.swing.JCheckBox rbnMes;
    private javax.swing.JTable tblMensualidades;
    private javax.swing.JTextField txtAnio;
    private javax.swing.JTextField txtAnioGenerate;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtFechaActual;
    // End of variables declaration//GEN-END:variables
}
